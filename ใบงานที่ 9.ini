import tkinter as tk
from tkinter import ttk, messagebox
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


def fetch_lottery_results():
    """‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö lottery.co.th"""
    url = "https://www.lottery.co.th/small"
    results = {}

    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")

    driver = None
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.get(url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.TAG_NAME, "strong"))
        )

        numbers = [el.text.strip() for el in driver.find_elements(By.TAG_NAME, "strong")]

        if len(numbers) >= 10:
            results = {
                "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1": numbers[1],
                "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß": numbers[3],
                "‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß": f"{numbers[5]} {numbers[6]}",
                "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß": f"{numbers[8]} {numbers[9]}",
            }
        else:
            results["Error"] = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
    except Exception as e:
        results["Error"] = str(e)
    finally:
        if driver:
            driver.quit()

    return results


def show_results():
    text_box.delete("1.0", tk.END)
    results = fetch_lottery_results()
    if results:
        for k, v in results.items():
            text_box.insert(tk.END, f"{k} : {v}\n\n")
    else:
        text_box.insert(tk.END, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")


root = tk.Tk()
root.title("‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•")
root.geometry("600x700")
root.configure(bg="#f0f0f0")
root.resizable(False, False)

style = ttk.Style()
style.configure("TFrame", background="#f0f0f0")
style.configure("TLabel", background="#f0f0f0", font=("Arial", 16))
style.configure("TButton", font=("Arial", 18), padding=10)

header = tk.Frame(root, bg="#007acc", height=80)
header.pack(fill="x")

title_label = tk.Label(header, text="‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•", font=("Arial", 26, "bold"), bg="#007acc", fg="white")
title_label.pack(pady=20)

main_frame = ttk.Frame(root, padding=20)
main_frame.pack(fill="both", expand=True)

text_frame = ttk.Frame(main_frame)
text_frame.pack(fill="both", expand=True, pady=10)

scrollbar = ttk.Scrollbar(text_frame)
scrollbar.pack(side="right", fill="y")

text_box = tk.Text(
    text_frame,
    font=("Consolas", 18),
    height=12,
    yscrollcommand=scrollbar.set,
    bg="#ffffff",
    fg="#000000",
    wrap="word",
    relief="solid",
    borderwidth=2
)
text_box.pack(fill="both", expand=True)
scrollbar.config(command=text_box.yview)

button = ttk.Button(main_frame, text="üì• ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", command=show_results)
button.pack(pady=20, ipadx=10, fill="x")

footer = tk.Label(root, text="‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ 38 (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)", font=("Arial", 12), bg="#f0f0f0", fg="#888888")
footer.pack(pady=10)

root.mainloop()
